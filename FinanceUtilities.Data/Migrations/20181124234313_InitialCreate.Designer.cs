// <auto-generated />
using System;
using FinanceUtilities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinanceUtilities.Data.Migrations
{
    [DbContext(typeof(FinanceContext))]
    [Migration("20181124234313_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("FinanceUtilities.Data.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonEmail");

                    b.Property<string>("ContactPersonPhoneNo");

                    b.Property<string>("Email");

                    b.Property<string>("LoanContactEmail");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("LogoImageName");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("FinanceUtilities.Data.Currency", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ExchangeRate");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("FinanceUtilities.Data.ExpenseType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("FinanceUtilities.Data.InterestPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyCode");

                    b.Property<int>("Duration");

                    b.Property<int?>("DurationFrom");

                    b.Property<int?>("DurationTo");

                    b.Property<int>("IRType");

                    b.Property<decimal>("InterestPercentage");

                    b.Property<bool>("IsBankClient");

                    b.Property<decimal?>("LoanAmountFrom");

                    b.Property<decimal?>("LoanAmountTo");

                    b.Property<int>("LoanProductId");

                    b.Property<decimal>("Maximum");

                    b.Property<decimal>("Minimum");

                    b.Property<int>("OrderNo");

                    b.Property<string>("ReferenceInterestId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("LoanProductId");

                    b.HasIndex("ReferenceInterestId");

                    b.ToTable("InterestPeriods");
                });

            modelBuilder.Entity("FinanceUtilities.Data.LoanProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BankId");

                    b.Property<string>("CurrencyCode");

                    b.Property<bool>("HasMarkupChanges");

                    b.Property<string>("Link");

                    b.Property<string>("LoanTypeId");

                    b.Property<string>("Markup")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("MarkupDate");

                    b.Property<int>("MaxDuration");

                    b.Property<decimal>("MaximumAmount");

                    b.Property<int>("MinDuration");

                    b.Property<decimal>("MinimumAmount");

                    b.Property<string>("Name");

                    b.Property<string>("NewMarkup")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("NewMarkupDate");

                    b.Property<decimal>("ParticipationPercentage");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("LoanProducts");
                });

            modelBuilder.Entity("FinanceUtilities.Data.LoanProductExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("DurationFrom");

                    b.Property<int?>("DurationTo");

                    b.Property<string>("ExpenseTypeId");

                    b.Property<bool>("IsBankClient");

                    b.Property<decimal>("LoanAmountFrom");

                    b.Property<decimal>("LoanAmountTo");

                    b.Property<int>("LoanProductId");

                    b.Property<decimal>("Maximum");

                    b.Property<decimal>("Minimum");

                    b.Property<decimal>("Percentage");

                    b.Property<bool>("Reccuring");

                    b.Property<int>("RecurmentType");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("LoanProductId");

                    b.ToTable("LoanProductExpenseTypes");
                });

            modelBuilder.Entity("FinanceUtilities.Data.LoanType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionEN");

                    b.Property<string>("Name");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("LoanTypes");
                });

            modelBuilder.Entity("FinanceUtilities.Data.ReferenceInterest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyCode");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("Name");

                    b.Property<decimal>("Rate");

                    b.Property<string>("TenorInMonths");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("ReferenceInterestRates");
                });

            modelBuilder.Entity("FinanceUtilities.Data.InterestPeriod", b =>
                {
                    b.HasOne("FinanceUtilities.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("FinanceUtilities.Data.LoanProduct", "LoanProduct")
                        .WithMany("InterestPeriods")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinanceUtilities.Data.ReferenceInterest", "ReferenceInterest")
                        .WithMany()
                        .HasForeignKey("ReferenceInterestId");
                });

            modelBuilder.Entity("FinanceUtilities.Data.LoanProduct", b =>
                {
                    b.HasOne("FinanceUtilities.Data.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FinanceUtilities.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("FinanceUtilities.Data.LoanType", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId");
                });

            modelBuilder.Entity("FinanceUtilities.Data.LoanProductExpenseType", b =>
                {
                    b.HasOne("FinanceUtilities.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("FinanceUtilities.Data.ExpenseType", "ExpenseType")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeId");

                    b.HasOne("FinanceUtilities.Data.LoanProduct", "LoanProduct")
                        .WithMany("LoanProductExpenses")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinanceUtilities.Data.ReferenceInterest", b =>
                {
                    b.HasOne("FinanceUtilities.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode");
                });
#pragma warning restore 612, 618
        }
    }
}
